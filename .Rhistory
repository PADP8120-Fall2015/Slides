mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
mods[[i]] <- lmi <- lm(ff, data = anscombe)
}
mods
summary(mods[[1]])
summary(mods[[2]])
data(quakes)
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
mods[[i]] <- lmi <- lm(ff, data = anscombe)
}
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
plot(mods[[i]], 1)
#ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
#plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
#     xlim = c(3, 19), ylim = c(3, 13))
#abline(mods[[i]], col = "blue")
}
par(op)
mods[[1]]
plot(mods[[1]],1)
anscombe$x1
anscombe$y1
anscombe$x1
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
mods[[i]] <- lmi <- lm(ff, data = anscombe)
}
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
par(op)
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
mods[[i]] <- lmi <- lm(ff, data = anscombe)
}
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
plot(mods[[i]], 1)
#ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
#plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
#     xlim = c(3, 19), ylim = c(3, 13))
#abline(mods[[i]], col = "blue")
}
par(op)
plot(anscombe$x1, m1$res) # x versus residuals
plot(m1$fit, m1$res) # x versus fitted
summary(m1 <- lm(y1 ~ x1, data = anscombe))
plot(anscombe$x1, m1$res) # x versus residuals
plot(m1$fit, m1$res) # x versus fitted
plot(m1, 1) # built-in function
plot(m1$fit, m1$res) # x versus fitted
plot(mods[[1]], 1)
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
plot(m1, 2)
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
?plot
?plot.lm
qqplot(m1)
m1
x <- rnorm(40)
qqnorm(x)
qqline(x)
x <- rnorm(1000)
qqnorm(x)
qqline(x)
par(mfrow = c(1, 2))
plot(m1, 1:2)
par(mfrow = c(2, 1))
plot(m1, 1:2)
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
abline(m1, col = "orange")
data(quakes)
?data(quakes)
data(quakes)
head(quakes)
quakes$stations
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
plot(m1, 2)
plot(stations ~ mag, data = quakes)
plot(m1, 2)
plot(m1, 2)
m1
plot(stations ~ mag, data = quakes)
par(mfrow = c(2, 1))
plot(m1, 1:2)
m1
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
abline(m1, col = "orange")
summary(m1)
m1
m1
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
text(x=6.0,y=40,labels=c(y = -180.42 + 46.28*x))
abline(m1, col = "orange")
part(mfrow=c(1,1))
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
text(x=6.0,y=40,labels=c(y = -180.42 + 46.28*x))
abline(m1, col = "orange")
?text
par(mfrow=c(1,1))
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
text(x=6.0,y=40,labels=c('y = -180.42 + 46.28*x'))
abline(m1, col = "orange")
par(mfrow=c(1,1))
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
text(x=6.0,y=40,expression(hat(y) == hat(\beta_0)))
#text(x=6.0,y=40,labels=c('y = -180.42 + 46.28*x'))
abline(m1, col = "orange")
text(x=6.0,y=40,expression(hat(y) == hat(beta_0)))
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
text(x=6.0,y=40,expression(hat(y) == -180.42 + 46.28*x)
plot(stations ~ mag, data = quakes)
m1 <- lm(stations ~ mag, data = quakes)
text(x=6.0,y=40,expression(hat(y) == -180.42 + 46.28*x))
par(mfrow = c(1, 2))
plot(m1, 1:2)
par(mfrow = c(2, 1))
plot(m1, 1:2)
plot(m1, 3)
part(mfrow=c(1,1))
par(mfrow=c(1,1))
plot(m1, 3)
library(faraway)
data(star)
par(mar=c(4,4,2,1), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(light ~ temp, data = star, pch=19, col=COL[2], xlab = "log(temp)", ylab = "log(light intensity)")
COL
i <- 5
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
par(mfrow = c(1, 2))
plot(x, y, col = COL[2], pch = 16)
abline(lm(y ~ x), col = COL[1], lwd = 3)
x2 <- x[1:70]
y2 <- y[1:70]
plot(x2, y2, col = COL[2], pch = 16, xlim = range(x), ylim = range(y))
abline(lm(y2 ~ x2), col = COL[1], lwd = 3)
set.seed(12)
i <- 2
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
y <- y - mean(y)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 1.25, cex.axis = 1.25, mfrow = c(2,1))
lmPlot(x, y, col = COL[2], lCol = COL[1], lwd = 3)
par(mar=c(4,4,2,1), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(light ~ temp, data = star, pch=19, col=COL[2], xlab = "log(temp)", ylab = "log(light intensity)")
abline(lm(light~temp, data = star), col = "darkgreen", lwd = 3, lty = 2)
abline(lm(light[temp>4]~temp[temp>4], data = star), col = COL[1], lwd = 3)
legend("top", inset = 0.05, c("w/ outliers","w/o outliers"), lty = c(2,1), lwd = c(2,3), col = c("darkgreen",COL[1]))
set.seed(12)
i <- 2
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
y <- y - mean(y)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 1.25, cex.axis = 1.25, mfrow = c(2,1))
lmPlot(x, y, col = COL[2], lCol = COL[1], lwd = 3)
i <- 5
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
par(mfrow = c(1, 2))
plot(x, y, col = COL[2], pch = 16)
abline(lm(y ~ x), col = COL[1], lwd = 3)
x2 <- x[1:70]
y2 <- y[1:70]
plot(x2, y2, col = COL[2], pch = 16, xlim = range(x), ylim = range(y))
abline(lm(y2 ~ x2), col = COL[1], lwd = 3)
i <- 5
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
par(mfrow = c(1, 2))
plot(x, y, col = COL[2], pch = 16)
abline(lm(y ~ x), col = COL[1], lwd = 3)
x2 <- x[1:70]
y2 <- y[1:70]
plot(x2, y2, col = COL[2], pch = 16, xlim = range(x), ylim = range(y))
abline(lm(y2 ~ x2), col = COL[1], lwd = 3)
n <- 100; x <- rnorm(n); y <- x + rnorm(n, sd = .3)
plot(c(-3, 6), c(-3, 6), type = "n", frame = FALSE, xlab = "X", ylab = "Y")
abline(lm(y ~ x), lwd = 2)
points(x, y, cex = 2, bg = "lightblue", col = "black", pch = 21)
points(0, 0, cex = 2, bg = "darkorange", col = "black", pch = 21)
points(0, 5, cex = 2, bg = "darkorange", col = "black", pch = 21)
points(5, 5, cex = 2, bg = "darkorange", col = "black", pch = 21)
points(5, 0, cex = 2, bg = "darkorange", col = "black", pch = 21)
m1 <- lm(y ~ x)
h <- lm.influence(lm(y ~ x))$hat
hist(h)
abline(v = 4/length(y), col = "red")
star
par(mar=c(4,4,2,1), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(light ~ temp, data = star, pch=19, col=COL[2], xlab = "log(temp)", ylab = "log(light intensity)")
m1 <- lm(light~temp, data = star)
abline(m1, col = "darkgreen", lwd = 3, lty = 2)
abline(lm(light[temp>4]~temp[temp>4], data = star), col = COL[1], lwd = 3)
legend("top", inset = 0.05, c("w/ outliers","w/o outliers"), lty = c(2,1), lwd = c(2,3), col = c("darkgreen",COL[1]))
m1 <- lm(light ~ temp, data = star)
par(mfrow = c(1, 2))
plot(m1, 4:5)
pairs(Price ~ Food + Decor + Service + East, data = nyc)
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
par(mfrow=c(2,2))
plot(Price ~ Food, data = nyc)
abline(lsfit(nyc$Food,nyc$Price))
plot(Price ~ Decor, data = nyc)
abline(lsfit(nyc$Decor,nyc$Price))
plot(Price ~ Service, data = nyc)
abline(lsfit(nyc$Service,nyc$Price))
plot(Price ~ East, data = nyc)
abline(lsfit(nyc$East,nyc$Price))
pairs(Price ~ Food + Decor + Service + East, data = nyc)
plot(resY ~ resX)
resY <- lm(Price ~ Decor + Service + East, data = nyc)$res
resX <- lm(Food ~ Decor + Service + East, data = nyc)$res
plot(resY ~ resX)
library(car)
m1 <- lm(Price ~ Food + Decor + Service + East, data = nyc)
avPlot(m1,variable = "Food")
AVPm1 <- lm(resY ~ resX)
AVPm1$coef
m1$coef
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
par(mfrow=c(2,2))
plot(Price ~ Food, data = nyc)
abline(lsfit(nyc$Food,nyc$Price))
plot(Price ~ Decor, data = nyc)
abline(lsfit(nyc$Decor,nyc$Price))
plot(Price ~ Service, data = nyc)
abline(lsfit(nyc$Service,nyc$Price))
plot(Price ~ East, data = nyc)
abline(lsfit(nyc$East,nyc$Price))
AVPm1 <- lm(resY ~ resX)
AVPm1$coef
m1$coef
avPlots(m1)
plot(resY ~ resX)
library(car)
m1 <- lm(Price ~ Food + Decor + Service + East, data = nyc)
avPlot(m1,variable = "Food")
plot(resY ~ resX)
avPlots(m1)
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
par(mfrow=c(2,2))
plot(Price ~ Food, data = nyc)
abline(lsfit(nyc$Food,nyc$Price))
plot(Price ~ Decor, data = nyc)
abline(lsfit(nyc$Decor,nyc$Price))
plot(Price ~ Service, data = nyc)
abline(lsfit(nyc$Service,nyc$Price))
plot(Price ~ East, data = nyc)
abline(lsfit(nyc$East,nyc$Price))
pairs(Price ~ Food + Decor + Service + East, data = nyc)
plot(defects$Defective ~ m1$fit)
abline(0, 1)
defects <- read.table("http://www.stat.tamu.edu/~sheather/book/docs/datasets/defects.txt",
header = TRUE)
head(defects)
pairs(Defective ~ Temperature + Density + Rate, data = defects)
m1 <- lm(Defective ~ Temperature + Density + Rate, data = defects)
summary(m1)$coef
par(mfrow = c(2, 2))
plot(m1)
par(mfrow = c(2, 2))
r <- rstandard(m1)
plot(r ~ defects$Temperature)
plot(r ~ defects$Density)
plot(r ~ defects$Rate)
plot(defects$Defective ~ m1$fit)
abline(0, 1)
par(mfrow = c(2, 2))
plot(m1)
par(mfrow = c(2, 2))
r <- rstandard(m1)
plot(r ~ defects$Temperature)
plot(r ~ defects$Density)
plot(r ~ defects$Rate)
plot(defects$Defective ~ m1$fit)
abline(0, 1)
par(mfrow = c(2, 2))
plot(m1)
plot(Defective ~ Temperature, data = defects)
plot(Defective ~ Temperature, data = defects)
lines(sort(defects$Temperature), sort(m1$fit), lwd = 2)
plot(Defective ~ Temperature, data = defects)
lines(sort(defects$Temperature), sort(m1$fit), lwd = 2)
l1 <- loess(m1$fit ~ defects$Temperature)
lines(sort(l1$x), sort(l1$fit), lwd = 2, col = "red", lty = 2)
plot(Defective ~ Temperature, data = defects)
lines(sort(defects$Temperature), sort(m1$fit), lwd = 2)
l1 <- loess(m1$fit ~ defects$Temperature)
lines(sort(l1$x), sort(l1$fit), lwd = 2, col = "red", lty = 2)
l2 <- loess(Defective ~ Temperature, data = defects)
lines(sort(l2$x), sort(l2$fit), lwd = 2, col = "blue", lty = 2)
par(mfrow=c(2, 2))
library(car)
mmp(m1, defects$Temperature)
mmp(m1, defects$Density)
mmp(m1, defects$Rate)
scatterplotMatrix(~ Defective + Temperature + Density + Rate, data = defects)
install.packages("binom")
library(manipulate)
pvals <- seq(0.01, 0.99, length = 1000)
manipulate(
plot(pvals, dbeta(pvals, alpha, beta), type = "l", lwd = 3, frame = FALSE),
alpha = slider(0.01, 10, initial = 1, step = .5),
beta = slider(0.01, 10, initial = 1, step = .5)
)
plot(pvals, dt(pvals, 2), type = "l", lwd = 3, frame = FALSE)
plot(pvals, dt(pvals, 10), type = "l", lwd = 3, frame = FALSE)
pvals <- seq(0.01, 0.99, length = 1000)
plot(pvals, dt(pvals, 10), type = "l", lwd = 3, frame = FALSE)
pvals <- seq(0.01, 0.99, length = 1000)
x <- 13; n <- 20
myPlot <- function(alpha, beta){
plot(0 : 1, 0 : 1, type = "n", xlab = "p", ylab = "", frame = FALSE)
lines(pvals, dbeta(pvals, alpha, beta) / max(dbeta(pvals, alpha, beta)),
lwd = 3, col = "darkred")
lines(pvals, dbinom(x,n,pvals) / dbinom(x,n,x/n), lwd = 3, col = "darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x)) / max(dbeta(pvals, alpha+x, beta+(n-x))),
lwd = 3, col = "darkgreen")
title("red=prior,green=posterior,blue=likelihood")
}
plot(myPlot)
myPlot(10,10)
myPlot(1,10)
myPlot(1,2)
myPlot(1,10)
myPlot(10,10)
myPlot(2,10)
pvals <- seq(0.01, 0.99, length = 1000)
x <- 13; n <- 20
myPlot2 <- function(alpha, beta, cl){
plot(pvals, dbeta(pvals, alpha+x, beta+(n-x)), type = "l", lwd = 3,
xlab = "p", ylab = "", frame = FALSE)
out <- binom.bayes(x, n, type = "highest",
prior.shape1 = alpha,
prior.shape2 = beta,
conf.level = cl)
p1 <- out$lower; p2 <- out$upper
lines(c(p1, p1, p2, p2), c(0, dbeta(c(p1, p2), alpha+x, beta+(n-x)), 0),
type = "l", lwd = 3, col = "darkred")
}
myPlot2(2,10,2)
LA <- read.csv("data/LA.csv")
LA <- transform(LA, log_price = log(price), log_sqft = log(sqft))
m1 <- lm(log_price ~ log_sqft, data = LA)
plot(m1, 1)
plot(log_price ~ log_sqft, data = LA)
abline(m1, col = "orange", lwd = 3)
lines(sort(LA$log_sqft), sort(m2$fit), col = "steelblue", lwd = 3)
legend(labels=c('linear','quadratic'),lty=1,cols=c('orange','steelblue'))
setwd("~/Google Drive/Course_Materials/PADP8120_Fall2015/Slides/Slides15_Transformations")
LA <- read.csv("data/LA.csv")
LA <- transform(LA, log_price = log(price), log_sqft = log(sqft))
m1 <- lm(log_price ~ log_sqft, data = LA)
plot(m1, 1)
m2 <- lm(log_price ~ log_sqft + I(log_sqft^2), data = LA)
summary(m2)$coef
plot(log_price ~ log_sqft, data = LA)
abline(m1, col = "orange", lwd = 3)
lines(sort(LA$log_sqft), sort(m2$fit), col = "steelblue", lwd = 3)
legend(labels=c('linear','quadratic'),lty=1,cols=c('orange','steelblue'))
plot(log_price ~ log_sqft, data = LA)
abline(m1, col = "orange", lwd = 3)
lines(sort(LA$log_sqft), sort(m2$fit), col = "steelblue", lwd = 3)
legend()
legend(x=10,y=13,legend = c('linear','quadratic'),
lty=1,cols=c('orange','steelblue'))
plot(log_price ~ log_sqft, data = LA)
abline(m1, col = "orange", lwd = 3)
lines(sort(LA$log_sqft), sort(m2$fit), col = "steelblue", lwd = 3)
legend(x=10,y=13,legend = c('linear','quadratic'),
lty=1,col=c('orange','steelblue'))
plot(log_price ~ log_sqft, data = LA)
abline(m1, col = "orange", lwd = 3)
lines(sort(LA$log_sqft), sort(m2$fit), col = "steelblue", lwd = 3)
legend(x=9,y=14,legend = c('linear','quadratic'),
lty=1,col=c('orange','steelblue'))
summary(m1)$adj
summary(m2)$adj
summary(m1)$AIC
AIC(m1)
AIC(m1);AIC(m2)
BIC(m1);BIC(m2)
AIC(m1);AIC(m2)
BIC(m1);BIC(m2)
summary(m1)$adj;summary(m2)$adj
anova(m1,m2)
library(car)
anova(m1,m2)
set.seed(10)
n = 90
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rnorm(n)
#create noise b/c there is always error in real life
epsilon = rnorm(n, 0, 3)
#generate response: additive model plus noise, intercept=0
y = 2*x1 + x2 + 3*x3 + epsilon
#organize predictors in data frame
sim_data = data.frame(y, x1, x2, x3)
cor.test(sim_data$y, sim_data$x1)$statistic
summary(lm(y ~ x1, data=sim_data))$coef
cor.test(sim_data$y, sim_data$x1)
sim_data_std = data.frame(scale(sim_data))
mod = lm(y  ~ x1 + x2 + x3, data=sim_data)
mod_std = lm(y  ~ x1 + x2 + x3, data=sim_data_std)
round(summary(mod)$coef, 3)
round(summary(mod_std)$coef, 3)
cor(sim_data$y, sim_data$x1)
cor(sim_data$y, sim_data$x2)
cor(sim_data$y, sim_data$x3)
sim_data_std = data.frame(scale(sim_data))
(mod = lm(y  ~ x1 + x2 + x3, data=sim_data))
(mod_std = lm(y  ~ x1 + x2 + x3, data=sim_data_std))
summary(mod = lm(y  ~ x1 + x2 + x3, data=sim_data))
summary(mod = lm(y  ~ x1 + x2 + x3, data=sim_data))
summary.lm(mod = lm(y  ~ x1 + x2 + x3, data=sim_data))
tidymod = lm(y  ~ x1 + x2 + x3, data=sim_data))
tidy(mod = lm(y  ~ x1 + x2 + x3, data=sim_data))
library(broom)
tidy(mod = lm(y  ~ x1 + x2 + x3, data=sim_data))
library(broom)
sim_data_std = data.frame(scale(sim_data))
mod = lm(y  ~ x1 + x2 + x3, data=sim_data)
mod_std = lm(y  ~ x1 + x2 + x3, data=sim_data_std)
summary(mod)
tidy(summary(mod))
tidy(mod)
library(broom)
sim_data_std = data.frame(scale(sim_data))
mod = lm(y  ~ x1 + x2 + x3, data=sim_data)
mod_std = lm(y  ~ x1 + x2 + x3, data=sim_data_std)
tidy(mod)
tidy(mod_std)
set.seed(10)
n = 90
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rnorm(n)
#create noise b/c there is always error in real life
epsilon = rnorm(n, 0, 3)
#generate response: additive model plus noise, intercept=0
y = 2*x1 + x2 + 3*x3 + epsilon
#organize predictors in data frame
sim_data = data.frame(y, x1, x2, x3)
library(broom)
sim_data_std = data.frame(scale(sim_data))
mod = lm(y  ~ x1 + x2 + x3, data=sim_data)
mod_std = lm(y  ~ x1 + x2 + x3, data=sim_data_std)
tidy(mod)
tidy(mod_std)
round(tidy(mod),3)
?tidy
tidy(mod,digits=3)
round(summary(mod)$coef, 3)
round(summary(mod_std)$coef, 3)
cor(sim_data$y, sim_data$x1)
cor(sim_data$y, sim_data$x2)
cor(sim_data$y, sim_data$x3)
pairs(sim_data, lower.panel = panel.cor, upper.panel = panel.smooth)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor=3, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor))
cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor)
}
pairs(sim_data, lower.panel = panel.cor, upper.panel = panel.smooth)
benth.data = read.csv('../Input/epa_coastal_benthic_data.csv')
trawl.data = read.csv('../Input/epa_coastal_trawl_data.csv')
wq.data = read.csv('../Input/epa_coastal_wq_data.csv',skip=1)
sed.data = read.csv('../Input/epa_coastal_sedtoxicity_data.csv')
getwd()
load('//Users/TScott/Downloads/atheism.RData')
